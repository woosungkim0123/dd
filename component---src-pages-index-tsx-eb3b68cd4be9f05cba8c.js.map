{"version":3,"file":"component---src-pages-index-tsx-eb3b68cd4be9f05cba8c.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Main/MainCarousel.tsx","webpack://gatsby-starter-default/./src/components/Main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/InfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx","webpack://gatsby-starter-default/./src/components/Main/MainContent.tsx","webpack://gatsby-starter-default/./src/components/Main/CategoryList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from \"react\";\r\nimport styled from \"@emotion/styled\"\r\n\r\n\r\nconst MainCarouselImgWrap = styled.div`\r\n  width: 100%;\r\n  height: 400px;\r\n  background-color: pink;\r\n  \r\n  @media (min-width: 768px) {\r\n    height: 350px;\r\n    \r\n  }\r\n`\r\nconst MainCarouselImg = styled.img`\r\n  \r\n  width: 100%; max-width: 1200px;\r\n  margin: 0 auto;\r\n  display:none;\r\n  @media (min-width: 768px) {\r\n    display: block;\r\n  }\r\n`\r\n\r\n\r\nconst MainCarousel: FunctionComponent = function(){\r\n  return (\r\n    <MainCarouselImgWrap>\r\n      <MainCarouselImg />\r\n    </MainCarouselImgWrap>\r\n  )\r\n}\r\n\r\nexport default MainCarousel","import styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\nimport React, { FunctionComponent } from 'react'\r\nimport { GatsbyImage } from 'gatsby-plugin-image'\r\nimport { PostFrontmatterType } from 'types/PostItem.types'\r\n\r\ntype PostItemProps = PostFrontmatterType & { link: string }\r\n\r\nconst PostItemMargin = styled.div`\r\n  width: 100%;\r\n`\r\n\r\nconst PostItemWrapper = styled(Link)`\r\n  margin: 20px;\r\n  display: flex;\r\n  \r\n`\r\nconst PostImage = styled(GatsbyImage)`\r\n  height: 200px;\r\n  width: 45%;\r\n  margin-right: 20px;\r\n\r\n  @media (min-width: 768px) {\r\n    height: 250px;\r\n    width: 50%;\r\n  }\r\n\r\n`\r\nconst PostContent = styled.div`\r\n  width: 55%;\r\n  height: 200px;\r\n  @media (min-width: 768px) {\r\n    height: 250px;\r\n    width: 50%;\r\n  }\r\n\r\n`\r\nconst CategoryItemWrap = styled.div`\r\n  display:flex;\r\n  overflow: hidden;\r\n  flex-wrap: wrap;\r\n`\r\nconst CategoryItem = styled.span`\r\n  font-size: 12px;\r\n  margin-right: 10px;\r\n  @media (min-width: 768px) {\r\n    font-size: 15px;\r\n  }\r\n`\r\nconst CategoryItemTitle = styled.h4`\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n  margin: 5px 0;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  max-height: 200px;\r\n  @media (min-width: 768px) {\r\n    font-size: 28px;\r\n    margin: 10px 0;\r\n  }\r\n\r\n`\r\nconst CategoryItemDate = styled.p`\r\n  font-size: 16px;\r\n  margin: 5px 0;\r\n\r\n  @media (min-width: 768px) {\r\n    font-size: 17px;\r\n    margin: 5px 0;\r\n  }\r\n\r\n`\r\nconst CategoryItemSummary = styled.p`\r\n  font-size: 15px;\r\n  margin: 10px 0;\r\n  line-height: 1.5;\r\n  max-width: 200px;\r\n\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 4;\r\n  -webkit-box-orient: vertical;\r\n  word-wrap:break-word; \r\n  @media (min-width: 768px) {\r\n    -webkit-line-clamp: 5;\r\n    font-size: 16px;\r\n  }\r\n\r\n\r\n`\r\n\r\nconst PostItem: FunctionComponent<PostItemProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n  summary,\r\n  thumbnail: {\r\n    childImageSharp: { gatsbyImageData },\r\n  },\r\n  link,\r\n}) {\r\n  return ( \r\n    <PostItemMargin>\r\n      <PostItemWrapper to={link}>\r\n        <PostImage image={gatsbyImageData} alt=\"Post Item Image\" />\r\n          <PostContent>\r\n            <CategoryItemTitle>{title}</CategoryItemTitle>\r\n            <CategoryItemDate>{date}</CategoryItemDate>\r\n            \r\n            <CategoryItemSummary>{summary}</CategoryItemSummary>\r\n            <CategoryItemWrap>\r\n              {categories.map(category => (\r\n                    <CategoryItem key={category}>#{category}</CategoryItem>\r\n                  ))}\r\n            </CategoryItemWrap>\r\n          </PostContent>\r\n\r\n      </PostItemWrapper>\r\n    </PostItemMargin>\r\n  )\r\n}\r\n\r\nexport default PostItem","import { MutableRefObject, useState, useRef, useMemo, useEffect } from 'react'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\nexport type useInfiniteScrollType = {\r\n  containerRef: MutableRefObject<HTMLDivElement | null>\r\n  postList: PostListItemType[]\r\n}\r\n\r\nconst NUMBER_OF_ITEMS_PER_PAGE = 12\r\n\r\nconst useInfiniteScroll = function (\r\n  selectedCategory: string,\r\n  posts: PostListItemType[],\r\n) {\r\n  const containerRef: MutableRefObject<HTMLDivElement | null> = useRef<HTMLDivElement>(\r\n    null,\r\n  )\r\n  const [count, setCount] = useState<number>(1)\r\n\r\n  const postListByCategory = useMemo<PostListItemType[]>(\r\n    () =>\r\n      posts.filter(({ node: { frontmatter: { categories } } }: PostListItemType) =>\r\n        selectedCategory !== 'All'\r\n          ? categories.includes(selectedCategory)\r\n          : true,\r\n      ),\r\n    [selectedCategory],\r\n  )\r\n\r\n  const observer: IntersectionObserver = new IntersectionObserver(\r\n    (entries, observer) => {\r\n      if (!entries[0].isIntersecting) return;\r\n\r\n      setCount(value => value + 1);\r\n      observer.disconnect();\r\n    },\r\n  )\r\n  useEffect(() => setCount(1), [selectedCategory])\r\n  \r\n  useEffect(() => {\r\n    if (\r\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\r\n      containerRef.current === null ||\r\n      containerRef.current.children.length === 0\r\n    )\r\n      return\r\n\r\n    observer.observe(\r\n      containerRef.current.children[containerRef.current.children.length - 1],\r\n    )\r\n  }, [count, selectedCategory])\r\n\r\n  return { \r\n    containerRef,\r\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE), \r\n  }\r\n}\r\n\r\nexport default useInfiniteScroll","import React, { FunctionComponent, useMemo } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport PostItem from 'components/Main/PostItem'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport useInfiniteScroll, { useInfiniteScrollType } from 'hooks/InfiniteScroll'\r\n\r\nconst PostListWrap = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 10px;\r\n  padding-top: 10px;\r\n  width: 100%;\r\n\r\n  @media (min-width: 768px) {\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n  @media (min-width: 1200px) {\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n  }\r\n`\r\ntype PostListProps = {\r\n  selectedCategory: string\r\n  posts: PostListItemType[]\r\n}\r\n\r\nconst PostList: FunctionComponent<PostListProps> = function ({selectedCategory, posts}) {\r\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\r\n    selectedCategory,\r\n    posts,\r\n  )\r\n\r\n  \r\n  return (\r\n  \r\n      <PostListWrap ref={containerRef}>\r\n        {postList.map(({ node: { id, fields: { slug }, frontmatter }}: PostListItemType) => (\r\n          <PostItem {...frontmatter} link={slug} key={id} />\r\n          )\r\n        )}\r\n      </PostListWrap>\r\n  )\r\n}\r\n\r\nexport default PostList","import styled from '@emotion/styled'\r\n\r\nimport React, { FunctionComponent } from 'react'\r\nimport PostList from './PostList'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\ntype PostListProps = {\r\n  posts: PostListItemType[]\r\n  selectedCategory: string\r\n}\r\n\r\nconst MainContentWrap = styled.div`\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  background-color: #fff;\r\n`\r\n\r\n\r\n\r\nconst MainContent: FunctionComponent<PostListProps> = function({posts, selectedCategory}){\r\n  return (\r\n    <MainContentWrap>\r\n      <PostList selectedCategory={selectedCategory} posts={posts} />\r\n    </MainContentWrap>\r\n  )\r\n}\r\n\r\nexport default MainContent","import React, { FunctionComponent, ReactNode } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\n\r\nexport type CategoryListProps = {\r\n  selectedCategory: string\r\n  categoryList: {\r\n    // 프로퍼티 이름은 문자열, 프로퍼티 값은 숫자임을 나타내는 타입 표기 방법\r\n    [key: string]: number\r\n  }\r\n  selectedCategoryChange: Function\r\n}\r\ntype CategoryItemProps = {\r\n  active: boolean;\r\n}\r\n\r\ntype GatsbyLinkProps = {\r\n  children: ReactNode;\r\n  className?: string;\r\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\r\n} & CategoryItemProps\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\r\n\r\nconst CategoryItem = styled.div<GatsbyLinkProps>`\r\n  margin-right: 15px;\r\n  padding: 5px 10px;\r\n  border: solid 1px #d3d3d3;\r\n  border-radius: 30px;\r\n  font-size: 15px;\r\n  font-weight: ${({ active }) => (active ? '800' : '400')};\r\n  cursor: pointer;\r\n  background-color: ${({ active }) => (active ? 'pink' : '#fff')};\r\n  color: ${({ active }) => (active ? 'white' : 'black')};\r\n  &:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n`\r\nconst CategoryItemAlign = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 1200px;\r\n`\r\nconst CategoryItemWrap = styled.div`\r\n  display: flex;\r\n  margin: 10px 10px;\r\n  overflow: auto;\r\n  -ms-overflow-style: none;\r\n  ::-webkit-scrollbar { \r\n    display:none; \r\n  }\r\n\r\n`\r\n\r\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\r\n  selectedCategory,\r\n  categoryList,\r\n  selectedCategoryChange\r\n}) {\r\n\r\n  return (\r\n    <>\r\n    <CategoryItemAlign>\r\n        <CategoryItemWrap>\r\n          {Object.entries(categoryList).map(([name]) => (\r\n            <CategoryItem active={name === selectedCategory} onClick={()=> {selectedCategoryChange(name)}} key={name} >\r\n              {name}\r\n            </CategoryItem>\r\n          ))}\r\n        </CategoryItemWrap>\r\n    </CategoryItemAlign>\r\n        \r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryList","import React, { FunctionComponent, useMemo, useState } from 'react'\r\nimport GlobalStyle from 'components/Common/GlobalStyle'\r\nimport MainNav from 'components/Common/Nav/MainNav'\r\nimport MainCarousel from 'components/Main/MainCarousel'\r\nimport Footer from 'components/Common/Footer'\r\nimport { graphql } from 'gatsby'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport MainContent from 'components/Main/MainContent'\r\nimport CategoryList, { CategoryListProps } from 'components/Main/CategoryList'\r\nimport Template from 'components/Common/Template'\r\n\r\ntype IndexPageProps = {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostListItemType[]\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\r\n  data: {\r\n    allMarkdownRemark: { edges }\r\n  }\r\n}) {\r\n  const [selectedCategory, selectedCategoryChange] = useState('All')\r\n  const categoryList = useMemo(\r\n    () =>\r\n      edges.reduce(\r\n        (\r\n          list: CategoryListProps['categoryList'],\r\n          {\r\n            node: {\r\n              frontmatter: { categories },\r\n            },\r\n          }: PostListItemType,\r\n        ) => {\r\n          categories.forEach(category => {\r\n            if (list[category] === undefined) list[category] = 1;\r\n            else list[category]++;\r\n          });\r\n\r\n          list['All']++;\r\n\r\n          return list;\r\n        },\r\n        { All: 0 },\r\n      ),\r\n    [],\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Template>\r\n        <MainCarousel />\r\n        <CategoryList selectedCategory={selectedCategory} selectedCategoryChange={selectedCategoryChange} categoryList={categoryList} />\r\n        <MainContent posts={edges} selectedCategory={selectedCategory} />\r\n      </Template>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default IndexPage\r\n\r\nexport const getPostList = graphql`\r\n  query getPostList {\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData(width: 200, height: 270)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["MainCarouselImgWrap","MainCarouselImg","PostItemMargin","PostItemWrapper","Link","PostImage","GatsbyImage","PostContent","CategoryItemWrap","CategoryItem","CategoryItemTitle","CategoryItemDate","CategoryItemSummary","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","to","image","alt","map","category","key","selectedCategory","posts","containerRef","useRef","useState","count","setCount","postListByCategory","useMemo","filter","node","frontmatter","includes","observer","IntersectionObserver","entries","isIntersecting","value","disconnect","useEffect","length","current","children","observe","postList","slice","PostListWrap","useInfiniteScroll","ref","id","slug","fields","MainContentWrap","active","CategoryItemAlign","categoryList","selectedCategoryChange","Object","name","onClick","edges","data","allMarkdownRemark","reduce","list","forEach","undefined","All","Template"],"sourceRoot":""}
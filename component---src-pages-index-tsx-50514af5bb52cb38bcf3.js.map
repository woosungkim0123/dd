{"version":3,"file":"component---src-pages-index-tsx-50514af5bb52cb38bcf3.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Main/MainCarousel.tsx","webpack://gatsby-starter-default/./src/components/Main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx","webpack://gatsby-starter-default/./src/components/Main/MainContent.tsx","webpack://gatsby-starter-default/./src/components/Main/CategoryList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst MainCarouselImgWrap = styled.div`\r\n  width: 100%;\r\n  height: 400px;\r\n  background-color: pink;\r\n\r\n  @media (min-width: 768px) {\r\n    height: 350px;\r\n  }\r\n`\r\nconst MainCarouselImg = styled.img`\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  display: none;\r\n  @media (min-width: 768px) {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst MainCarousel: FunctionComponent = function () {\r\n  return (\r\n    <MainCarouselImgWrap>\r\n      <MainCarouselImg />\r\n    </MainCarouselImgWrap>\r\n  )\r\n}\r\n\r\nexport default MainCarousel\r\n","import styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\nimport React, { FunctionComponent } from 'react'\r\nimport { GatsbyImage } from 'gatsby-plugin-image'\r\nimport { PostFrontmatterType } from 'types/PostItem.types'\r\n\r\ntype PostItemProps = PostFrontmatterType & { link: string }\r\n\r\nconst PostItemMargin = styled.div`\r\n  width: 100%;\r\n`\r\n\r\nconst PostItemWrapper = styled(Link)`\r\n  margin: 20px;\r\n  display: flex;\r\n`\r\nconst PostImage = styled(GatsbyImage)`\r\n  height: 200px;\r\n  width: 45%;\r\n  margin-right: 20px;\r\n\r\n  @media (min-width: 768px) {\r\n    height: 250px;\r\n    width: 50%;\r\n  }\r\n`\r\nconst PostContent = styled.div`\r\n  width: 55%;\r\n  height: 200px;\r\n  @media (min-width: 768px) {\r\n    height: 250px;\r\n    width: 50%;\r\n  }\r\n`\r\nconst CategoryItemWrap = styled.div`\r\n  display: flex;\r\n  overflow: hidden;\r\n  flex-wrap: wrap;\r\n`\r\nconst CategoryItem = styled.span`\r\n  font-size: 12px;\r\n  margin-right: 10px;\r\n  @media (min-width: 768px) {\r\n    font-size: 15px;\r\n  }\r\n`\r\nconst CategoryItemTitle = styled.h4`\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n  margin: 5px 0;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  max-height: 200px;\r\n  @media (min-width: 768px) {\r\n    font-size: 28px;\r\n    margin: 10px 0;\r\n  }\r\n`\r\nconst CategoryItemDate = styled.p`\r\n  font-size: 16px;\r\n  margin: 5px 0;\r\n\r\n  @media (min-width: 768px) {\r\n    font-size: 17px;\r\n    margin: 5px 0;\r\n  }\r\n`\r\nconst CategoryItemSummary = styled.p`\r\n  font-size: 15px;\r\n  margin: 10px 0;\r\n  line-height: 1.5;\r\n  max-width: 200px;\r\n\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 4;\r\n  -webkit-box-orient: vertical;\r\n  word-wrap: break-word;\r\n  @media (min-width: 768px) {\r\n    -webkit-line-clamp: 5;\r\n    font-size: 16px;\r\n  }\r\n`\r\n\r\nconst PostItem: FunctionComponent<PostItemProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n  summary,\r\n  thumbnail: {\r\n    childImageSharp: { gatsbyImageData },\r\n  },\r\n  link,\r\n}) {\r\n  return (\r\n    <PostItemMargin>\r\n      <PostItemWrapper to={link}>\r\n        <PostImage image={gatsbyImageData} alt=\"Post Item Image\" />\r\n        <PostContent>\r\n          <CategoryItemTitle>{title}</CategoryItemTitle>\r\n          <CategoryItemDate>{date}</CategoryItemDate>\r\n\r\n          <CategoryItemSummary>{summary}</CategoryItemSummary>\r\n          <CategoryItemWrap>\r\n            {categories.map(category => (\r\n              <CategoryItem key={category}>#{category}</CategoryItem>\r\n            ))}\r\n          </CategoryItemWrap>\r\n        </PostContent>\r\n      </PostItemWrapper>\r\n    </PostItemMargin>\r\n  )\r\n}\r\n\r\nexport default PostItem\r\n","/* eslint-disable prettier/prettier */\r\n/* eslint-disable prefer-const */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { MutableRefObject, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\nexport type useInfiniteScrollType = {\r\n  containerRef: MutableRefObject<HTMLDivElement | null>\r\n  postList: PostListItemType[]\r\n}\r\n\r\nconst NUMBER_OF_ITEMS_PER_PAGE = 12\r\n\r\nconst useInfiniteScroll = function (\r\n  selectedCategory: string,\r\n  posts: PostListItemType[],\r\n): useInfiniteScrollType {\r\n  const containerRef: MutableRefObject<HTMLDivElement | null> =\r\n    useRef<HTMLDivElement>(null)\r\n  const observer: MutableRefObject<IntersectionObserver | null> =\r\n    useRef<IntersectionObserver>(null)\r\n  const [count, setCount] = useState<number>(1)\r\n\r\n  const postListByCategory = useMemo<PostListItemType[]>(\r\n    () =>\r\n      posts.filter(\r\n        ({\r\n          node: {\r\n            frontmatter: { categories },\r\n          },\r\n        }: PostListItemType) =>\r\n          selectedCategory !== 'All'\r\n            ? categories.includes(selectedCategory)\r\n            : true,\r\n      ),\r\n    [selectedCategory],\r\n  )\r\n\r\n  useEffect(() => {\r\n    observer.current = new IntersectionObserver((entries, observer) => {\r\n      if (!entries[0].isIntersecting) return\r\n\r\n      setCount(value => value + 1)\r\n      observer.unobserve(entries[0].target)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => setCount(1), [selectedCategory])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\r\n      containerRef.current === null ||\r\n      containerRef.current.children.length === 0 ||\r\n      observer.current === null\r\n    )\r\n      return\r\n\r\n    observer.current.observe(\r\n      containerRef.current.children[containerRef.current.children.length - 1],\r\n    )\r\n  }, [count, selectedCategory])\r\n\r\n  return {\r\n    containerRef,\r\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\r\n  }\r\n}\r\n\r\nexport default useInfiniteScroll","import React, { FunctionComponent, useMemo } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport PostItem from 'components/Main/PostItem'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport useInfiniteScroll from 'hooks/useInfiniteScroll'\r\n\r\nconst PostListWrap = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 10px;\r\n  padding-top: 10px;\r\n  width: 100%;\r\n\r\n  @media (min-width: 768px) {\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n  @media (min-width: 1200px) {\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n  }\r\n`\r\ntype PostListProps = {\r\n  selectedCategory: string\r\n  posts: PostListItemType[]\r\n}\r\n\r\nconst PostList: FunctionComponent<PostListProps> = function ({\r\n  selectedCategory,\r\n  posts,\r\n}) {\r\n  const { containerRef, postList } = useInfiniteScroll(selectedCategory, posts)\r\n\r\n  return (\r\n    <PostListWrap ref={containerRef}>\r\n      {postList.map(\r\n        ({\r\n          node: {\r\n            id,\r\n            fields: { slug },\r\n            frontmatter,\r\n          },\r\n        }: PostListItemType) => (\r\n          <PostItem {...frontmatter} link={slug} key={id} />\r\n        ),\r\n      )}\r\n    </PostListWrap>\r\n  )\r\n}\r\n\r\nexport default PostList\r\n","import styled from '@emotion/styled'\r\n\r\nimport React, { FunctionComponent } from 'react'\r\nimport PostList from './PostList'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\ntype PostListProps = {\r\n  posts: PostListItemType[]\r\n  selectedCategory: string\r\n}\r\n\r\nconst MainContentWrap = styled.div`\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  background-color: #fff;\r\n`\r\n\r\nconst MainContent: FunctionComponent<PostListProps> = function ({\r\n  posts,\r\n  selectedCategory,\r\n}) {\r\n  return (\r\n    <MainContentWrap>\r\n      <PostList selectedCategory={selectedCategory} posts={posts} />\r\n    </MainContentWrap>\r\n  )\r\n}\r\n\r\nexport default MainContent\r\n","import React, { FunctionComponent, ReactNode } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nexport type CategoryListProps = {\r\n  selectedCategory: string\r\n  categoryList: {\r\n    // 프로퍼티 이름은 문자열, 프로퍼티 값은 숫자임을 나타내는 타입 표기 방법\r\n    [key: string]: number\r\n  }\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  selectedCategoryChange: Function\r\n}\r\ntype CategoryItemProps = {\r\n  active: boolean\r\n}\r\n\r\ntype GatsbyLinkProps = {\r\n  children: ReactNode\r\n  className?: string\r\n  onClick: React.MouseEventHandler<HTMLButtonElement>\r\n} & CategoryItemProps\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\r\nconst CategoryItem = styled.div<GatsbyLinkProps>`\r\n  margin-right: 15px;\r\n  padding: 5px 10px;\r\n  border: solid 1px #d3d3d3;\r\n  border-radius: 30px;\r\n  font-size: 15px;\r\n  font-weight: ${({ active }) => (active ? '800' : '400')};\r\n  cursor: pointer;\r\n  background-color: ${({ active }) => (active ? 'pink' : '#fff')};\r\n  color: ${({ active }) => (active ? 'white' : 'black')};\r\n  &:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n`\r\nconst CategoryItemAlign = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 1200px;\r\n`\r\nconst CategoryItemWrap = styled.div`\r\n  display: flex;\r\n  margin: 10px 10px;\r\n  overflow: auto;\r\n  -ms-overflow-style: none;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\r\n  selectedCategory,\r\n  categoryList,\r\n  selectedCategoryChange,\r\n}) {\r\n  return (\r\n    <>\r\n      <CategoryItemAlign>\r\n        <CategoryItemWrap>\r\n          {Object.entries(categoryList).map(([name]) => (\r\n            <CategoryItem\r\n              active={name === selectedCategory}\r\n              onClick={() => {\r\n                selectedCategoryChange(name)\r\n              }}\r\n              key={name}\r\n            >\r\n              {name}\r\n            </CategoryItem>\r\n          ))}\r\n        </CategoryItemWrap>\r\n      </CategoryItemAlign>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryList\r\n","import React, { FunctionComponent, useMemo, useState } from 'react'\n\nimport MainCarousel from 'components/Main/MainCarousel'\n\nimport { graphql } from 'gatsby'\nimport { PostListItemType } from 'types/PostItem.types'\nimport MainContent from 'components/Main/MainContent'\nimport CategoryList, { CategoryListProps } from 'components/Main/CategoryList'\nimport Template from 'components/Common/Template'\n\ntype IndexPageProps = {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n        siteImage: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostListItemType[]\n    }\n  }\n}\n\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl, siteImage },\n    },\n    allMarkdownRemark: { edges },\n  },\n}) {\n  const [selectedCategory, selectedCategoryChange] = useState('All')\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostListItemType,\n        ) => {\n          categories.forEach(category => {\n            if (list[category] === undefined) list[category] = 1\n            else list[category]++\n          })\n\n          list['All']++\n\n          return list\n        },\n        { All: 0 },\n      ),\n    [],\n  )\n\n  return (\n    <>\n      <Template \n        title={title}\n        description={description}\n        url={siteUrl}\n        image={siteImage}\n      >\n        <MainCarousel />\n        <CategoryList\n          selectedCategory={selectedCategory}\n          selectedCategoryChange={selectedCategoryChange}\n          categoryList={categoryList}\n        />\n        <MainContent posts={edges} selectedCategory={selectedCategory} />\n      </Template>\n    </>\n  )\n}\n\nexport default IndexPage\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n        siteImage\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 200, height: 270)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["MainCarouselImgWrap","MainCarouselImg","PostItemMargin","PostItemWrapper","Link","PostImage","GatsbyImage","PostContent","CategoryItemWrap","CategoryItem","CategoryItemTitle","CategoryItemDate","CategoryItemSummary","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","to","image","alt","map","category","key","selectedCategory","posts","containerRef","useRef","observer","useState","count","setCount","postListByCategory","useMemo","filter","node","frontmatter","includes","useEffect","current","IntersectionObserver","entries","isIntersecting","value","unobserve","target","length","children","observe","postList","slice","PostListWrap","useInfiniteScroll","ref","id","slug","fields","MainContentWrap","active","CategoryItemAlign","categoryList","selectedCategoryChange","Object","name","onClick","data","site","siteMetadata","description","siteUrl","siteImage","edges","allMarkdownRemark","reduce","list","forEach","undefined","All","Template","url"],"sourceRoot":""}